apiVersion: v1
kind: ConfigMap
metadata:
  name: app-config
data:
  WELCOME_MESSAGE: "Welcome to Kakao Cloud"
  BACKGROUND_COLOR: "#4a69bd"
  
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: sql-script
data:
  script.sql: |
    CREATE DATABASE IF NOT EXISTS history;
    USE history;
    CREATE TABLE IF NOT EXISTS access (
      id INT AUTO_INCREMENT PRIMARY KEY,
      date VARCHAR(255) NOT NULL
    );
    INSERT INTO access (date) VALUES ('hello:)');
    CALL mysql.mnms_grant_right_user('admin', '%', 'all', '*', '*');
    ALTER USER 'admin'@'%' IDENTIFIED WITH mysql_native_password BY 'admin1234';
    
---
apiVersion: v1
kind: Secret
metadata:
  name: app-secret
type: Opaque
data:
  DB1_PORT: 'MzMwNg=='
  DB1_URL: "${DB_EP1}"
  DB1_ID: 'YWRtaW4='
  DB1_PW: 'YWRtaW4xMjM0'
  DB2_PORT: 'MzMwNw=='
  DB2_URL: "${DB_EP2}"
  DB2_ID: 'YWRtaW4='
  DB2_PW: 'YWRtaW4xMjM0'
  
---
apiVersion: batch/v1
kind: Job
metadata:
  name: sql-job
spec:
  template:
    spec:
      containers:
      - name: mysql
        image: mysql:5.7
        env:
        - name: MYSQL_ROOT_PASSWORD
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB1_PW
        - name: MYSQL_HOST
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB1_URL
        - name: MYSQL_PORT
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB1_PORT
        - name: MYSQL_USER
          valueFrom:
            secretKeyRef:
              name: app-secret
              key: DB1_ID
        command: ["/bin/bash", "-c"]
        args: ["mysql -h $(MYSQL_HOST) -P $(MYSQL_PORT) -u $(MYSQL_USER) -p$(MYSQL_ROOT_PASSWORD) < /scripts/script.sql && echo 'SQL script executed successfully' || exit 1"]
        volumeMounts:
        - name: script-volume
          mountPath: /scripts
      volumes:
      - name: script-volume
        configMap:
          name: sql-script
      restartPolicy: Never
  backoffLimit: 4
  
---
apiVersion: networking.k8s.io/v1
kind: Ingress
metadata:
  name: kc-nginx-ingress
  annotations:
    nginx.ingress.kubernetes.io/rewrite-target: /
    nginx.ingress.kubernetes.io/ssl-redirect: "false"
spec:
  ingressClassName: nginx
  rules:
    - http:
        paths:
          - path: /
            pathType: Prefix
            backend:
              service:
                name: kc-spring-service
                port:
                  number: 80

---
apiVersion: v1
kind: Service
metadata:
  name: kc-spring-service
spec:
  type: ClusterIP
  selector:
    app: kc-spring-demo
  ports:
    - protocol: TCP
      port: 80
      targetPort: 8080

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: demo-deployment
  labels:
    app: kc-spring-demo
spec:
  replicas: 2  # 복제본 갯수
  selector:
    matchLabels:
      app: kc-spring-demo
  template:
    metadata:
      labels:
        app: kc-spring-demo
    spec:
    spec:
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
            - weight: 100
              podAffinityTerm:
                labelSelector:
                  matchExpressions:
                    - key: app
                      operator: In
                      values:
                        - kc-spring-demo
                topologyKey: topology.kubernetes.io/zone
      containers:
      - name: kc-webserver
        image: ${PROJECT_NAME}.kr-central-2.kcr.dev/kakao-registry/${DOCKER_IMAGE_NAME}:1.0
        envFrom:
        - configMapRef:
            name: app-config
        - secretRef:
            name: app-secret
        ports:
        - containerPort: 8080
      imagePullSecrets:
      - name: regcred  # NCR에 저장된 이미지 Pulling을 위한 인증 Secret 값
